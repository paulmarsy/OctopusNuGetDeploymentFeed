{
    "Id": "ActionTemplates-703",
    "Name": "Octopus - Create Chain Deployment NuGet Feed micro service",
    "Description": "Provisions & registers a _NuGet External Feed_ micro service in Octopus that can be used to initiate chain deployments. \n[View the OctopusNuGetDeploymentFeed GitHub page for more information](https://github.com/paulmarsy/OctopusNuGetDeploymentFeed)",
    "ActionType": "Octopus.AzurePowerShell",
    "Version": 61,
    "CommunityActionTemplateId": null,
    "Properties": {
      "Octopus.Action.Azure.AccountId": "#{StepTemplate_Account}",
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.ScriptBody": "<#\r\n ----- Octopus - Create Chain Deployment NuGet Feed ----- \r\n    Paul Marston @paulmarsy (paul@marston.me)\r\n\r\n----- Advanced Configuration Settings -----\r\nVariable names can use either of the following two formats: \r\n    Octopus.Action.<Setting Name> - will apply to all steps in the deployment, e.g.\r\n        Octopus.Action.DebugLogging\r\n    Octopus.Action[Step Name].<Setting Name> - will apply to 'step name' alone, e.g.\r\n        Octopus.Action[Capture Web VM Image].StorageAccountKey\r\n\r\nAvailable Settings:\r\n    TemplateUri - the ARM template to use \r\n    InstallScript - PowerShell script to run on the VM after the service has been deployed, but before starting\r\n#>\r\n#Requires -Modules AzureRM.Resources\r\n#Requires -Modules AzureRM.Network\r\n\r\n$ErrorActionPreference = 'Stop'\r\n\r\nfunction Get-OctopusSetting  {\r\n    param([Parameter(Position = 0, Mandatory)][string]$Name, [Parameter(Position = 1, Mandatory)]$DefaultValue)\r\n    $formattedName = 'Octopus.Action.{0}' -f $Name\r\n    if ($OctopusParameters.ContainsKey($formattedName)) {\r\n        $value = $OctopusParameters[$formattedName]\r\n        if ($DefaultValue -is [int]) { return ([int]::Parse($value)) }\r\n        if ($DefaultValue -is [bool]) { return ([System.Convert]::ToBoolean($value)) }\r\n        if ($DefaultValue -is [array] -or $DefaultValue -is [hashtable] -or $DefaultValue -is [pscustomobject]) { return (ConvertFrom-Json -InputObject $value) }\r\n        return $value\r\n    }\r\n    else { return $DefaultValue }\r\n}\r\n\r\n$resourceGroup = Get-AzureRmResourceGroup -Name $StepTemplate_ResourceGroupName -ErrorAction Ignore\r\nif ($resourceGroup) {\r\n    Write-Host \"Removing existing resource group: $($resourceGroup.ResourceGroupName)...\"\r\n    Remove-AzureRmResourceGroup -Name $resourceGroup.ResourceGroupName -Force | Out-Null\r\n}\r\nWrite-Host \"Creating resource group '$StepTemplate_ResourceGroupName' in region $StepTemplate_Location...\"\r\n$resourceGroup = New-AzureRmResourceGroup -Name $StepTemplate_ResourceGroupName -Location $StepTemplate_Location\r\nWrite-Verbose ($resourceGroup | Out-String)\r\n\r\nWrite-Host \"Creating KeyVault...\"\r\n$vaultName = \"KeyVault-$((New-Guid).Guid.Substring(0, 4))\"\r\n$vault =  New-AzureRmKeyVault -VaultName $vaultName -ResourceGroupName $StepTemplate_ResourceGroupName -Location $StepTemplate_Location -EnabledForDeployment\r\nWrite-Host \"Setting KeyVault access policy...\"\r\nSet-AzureRmKeyVaultAccessPolicy -ResourceGroupName $StepTemplate_ResourceGroupName -VaultName $vaultName -ServicePrincipalName $OctopusParameters['Octopus.Action.Azure.ClientId'] -PermissionsToKeys all -PermissionsToSecrets  all -PermissionsToCertificates all \r\n\r\nWrite-Host \"Creating new self signed certificate...\" \r\n$certPassword = (New-Guid).Guid\r\n$pfxFilePath = Join-Path $PWD \"${StepTemplate_Name}.pfx\"\r\nNew-SelfSignedCertificate -CertStoreLocation Cert:\\CurrentUser\\My -DnsName \"$($StepTemplate_Name.ToLower()).$($resourceGroup.Location).cloudapp.azure.com\" | Export-PfxCertificate -FilePath $pfxFilePath -Password (ConvertTo-SecureString -String $certPassword -AsPlainText -Force) -Force\r\n$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $pfxFilePath, $certPassword\r\n\r\n$certInfoFilePath = Join-Path $PWD \"${StepTemplate_Name}.txt\"\r\nSet-Content -Path $certInfoFilePath -Value @\"\r\nCertificate Thumbprint: $($cert.Thumbprint)\r\nCertificate Password: $certPassword\r\n\"@\r\n\r\nWrite-Host \"Importing certificate as Octopus Artifact...\"\r\nNew-OctopusArtifact -Path $pfxFilePath -Name \"${StepTemplate_Name}.pfx\"\r\nNew-OctopusArtifact -Path $certInfoFilePath -Name \"${StepTemplate_Name}.txt\"\r\n\r\nWrite-Host \"Importing certificate into KeyVault...\"\r\n$jsonBlob = @{\r\n   data = ([System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($pfxFilePath)))\r\n   dataType = 'pfx'\r\n   password = $certPassword\r\n} | ConvertTo-Json\r\n\r\n$secretValue = ConvertTo-SecureString -String ([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($jsonBlob))) -AsPlainText -Force\r\n$secret = Set-AzureKeyVaultSecret -VaultName $vaultName -Name \"${StepTemplate_Name}Certificate\" -SecretValue $secretValue\r\n\r\nWrite-Host \"Starting resource group deployment...\"\r\n$parameters = @{\r\n    namePrefix = $StepTemplate_Name\r\n    virtualMachineInstances =$StepTemplate_Instances\r\n    virtualMachineSize = 'Standard_A1_v2'\r\n    adminUsername = 'octofeedadmin'\r\n    existingVnetSubnetResourceId = $StepTemplate_VNetSubnetId\r\n    keyVaultResourceId = $vault.ResourceId\r\n    certificateUrl = $secret.Id\r\n    certificateThumbprint = $cert.Thumbprint\r\n}\r\nWrite-Verbose ($parameters | ConvertTo-Json)\r\n$deployment = New-AzureRmResourceGroupDeployment -Name OctopusNuGetFeedDeployment -ResourceGroupName $resourceGroup.ResourceGroupName -Force `\r\n    -TemplateUri \"https://raw.githubusercontent.com/paulmarsy/OctopusNuGetDeploymentFeed/master/Provisioning/azuredeploy.json\" `\r\n    -TemplateParameterObject $parameters `\r\n    -adminPassword (ConvertTo-SecureString -String (New-Guid).Guid -AsPlainText -Force)\r\nWrite-Host ($deployment | Format-List -Property @('DeploymentName','ResourceGroupName','ProvisioningState','Timestamp','ParametersString', 'OutputsString') | Out-String)\r\n\r\ndo {\r\n    $cluster = Get-AzureRmResource -ResourceGroupName $resourceGroup.ResourceGroupName -ResourceName \"${StepTemplate_Name}Cluster\" -ResourceType 'Microsoft.ServiceFabric/clusters' \r\n    Write-Host \"Service Fabric Cluster status: $($cluster.Properties.clusterState)\"\r\n    if ($cluster.Properties.clusterState -ne 'Ready') {\r\n        Start-Sleep -Seconds 30\r\n    }\r\n} while ($cluster.Properties.clusterState -ne 'Ready')\r\n    \r\nWrite-Host \"Downloading OctopusDeployNuGetFeed.exe from GitHub...\"\r\n$appUriRequest = [System.Net.WebRequest]::Create(\"https://github.com/paulmarsy/OctopusNuGetDeploymentFeed/releases/latest/\")\r\n$appUriRequest.AllowAutoRedirect = $false\r\n$appDownloadUri = ([string]$appUriRequest.GetResponse().GetResponseHeader(\"Location\")).Replace('tag','download') + '/OctopusDeployNuGetFeed.exe'\r\n$appPath = Join-Path $PWD 'OctopusDeployNuGetFeed.exe'\r\nInvoke-WebRequest -UseBasicParsing -Uri $appDownloadUri -OutFile $appPath -Verbose\r\n    \r\n$installScript = Get-OctopusSetting InstallScript \"\"\r\n$encodedInstallScript = if ([string]::IsNullOrWhiteSpace($installScript)) {\r\n    $null\r\n} else {\r\n    [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($installScript))\r\n}\r\nWrite-Host 'Starting application deployment...'\r\n\r\nWrite-Host \"Service Fabric deployment command: OctopusDeployNuGetFeed.exe deploy-service-fabric $($deployment.Outputs.publicFqdn.Value) $($cert.Thumbprint) $($deployment.Outputs.appInsightsKey.Value) $encodedInstallScript\"\r\n& $appPath deploy-service-fabric $deployment.Outputs.publicFqdn.Value $cert.Thumbprint $deployment.Outputs.appInsightsKey.Value $encodedInstallScript\r\n\r\n$feedUrl = 'http://{0}/' -f $deployment.Outputs.publicFqdn.Value\r\nSet-OctopusVariable FeedUrl $feedUrl\r\n\r\nWrite-Host 'Registering NuGet feed with Octopus...'\r\n$credential = New-Object pscredential -ArgumentList @($StepTemplate_BaseUrl, (ConvertTo-SecureString -AsPlainText -Force $StepTemplate_ApiKey))\r\n\r\n$registerResult = Invoke-RestMethod -UseBasicParsing -Credential $credential -Uri \"${feedUrl}/admin/registerfeed\"\r\nWrite-Host \"$($registerResult.action) NuGet feed: ${StepTemplate_BaseUrl}/app#/library/feeds/$($registerResult.id)\"\r\n\r\nWrite-Host ('-'*80)\r\n\r\nWrite-Host 'Deployment completed successfully!'\r\nWrite-Host \"NuGet Feed Endpoint: ${feedUrl}/nuget\"\r\nWrite-Host \"Octopus Deploy Test URL: ${StepTemplate_BaseUrl}/app#/library/feeds/$($registerResult.id)/test\"\r\nWrite-Host 'More Info: https://github.com/paulmarsy/OctopusNuGetDeploymentFeed'",
      "Octopus.Action.Package.FeedId": null,
      "Octopus.Action.Script.ScriptFileName": null,
      "Octopus.Action.Package.PackageId": null
    },
    "Parameters": [
      {
        "Id": "603ad1fe-6aae-4df6-ba70-653f5c0554cd",
        "Name": "StepTemplate_BaseUrl",
        "Label": "Octopus Server URL",
        "HelpText": "Root URL of the Octopus Web Portal that the NuGet feed will connect to & create deployable NuGet packages for e.g.\n\nhttps://demo.octopusdeploy.com/",
        "DefaultValue": "#{Octopus.Web.BaseUrl}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "3e3f415b-58d1-4717-980f-ca6bb1f49ac2",
        "Name": "StepTemplate_ApiKey",
        "Label": "API Key",
        "HelpText": "An Octopus API Key with appropriate permissions to create the [NuGet external feed](#/library/feeds) & perform Octopus deployments.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        },
        "Links": {}
      },
      {
        "Id": "d3ccdbbd-c28f-4024-8d32-f5b3f8361215",
        "Name": "StepTemplate_Account",
        "Label": "Octopus Azure Account",
        "HelpText": "The [account id](#/accounts) of an Azure Service Principal to provision the micro service virtual machine with.\n\nMust be in the Octopus id format i.e. **azureserviceprincipal-visual-studio-enterprise**",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "f5218137-d3c9-4bc8-bbad-56c1a7500a1b",
        "Name": "StepTemplate_ResourceGroupName",
        "Label": "Resource Group Name",
        "HelpText": "The name of an Azure Resource Group to create & deploy the micro service into.\n\n_The resource group will be deleted & recreated if it already exists_",
        "DefaultValue": "OctopusNuGetChainFeed",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "dbfbfbed-d726-4b12-bc02-d6defb1907d2",
        "Name": "StepTemplate_VNetSubnetId",
        "Label": "Virtual Network Subnet",
        "HelpText": "The resource id of an existing virtual network's subnet that the virtual machine can connect to.\n\nLeave this field empty and a new virtual network will be created automatically during deployment.\n\nThe NuGet feed required two-way connectivity between the Octopus web portal and the virtual machine using HTTP.",
        "DefaultValue": "CreateNew",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "d7f5602d-001c-4348-88df-485517d0053b",
        "Name": "StepTemplate_Instances",
        "Label": "Instance Count",
        "HelpText": "",
        "DefaultValue": "1",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "1f4020d1-86f4-494a-8300-2da08a813dee",
        "Name": "StepTemplate_Name",
        "Label": "Name",
        "HelpText": null,
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "2ad63aec-b3a2-4f8e-8a1b-5f4eef0dbcba",
        "Name": "StepTemplate_Location",
        "Label": "Location",
        "HelpText": "",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      }
    ],
    "$Meta": {
      "ExportedAt": "2017-09-06T01:03:33.304Z",
      "OctopusVersion": "3.16.5",
      "Type": "ActionTemplate"
    }
  }